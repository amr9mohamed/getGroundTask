// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	tables "github.com/getground/tech-tasks/backend/definitions/tables"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountEmptySeats provides a mock function with given fields:
func (_m *Repository) CountEmptySeats() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Create provides a mock function with given fields: request
func (_m *Repository) Create(request tables.CreateRequest) (tables.Table, error) {
	ret := _m.Called(request)

	var r0 tables.Table
	if rf, ok := ret.Get(0).(func(tables.CreateRequest) tables.Table); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(tables.Table)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tables.CreateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id uint) (tables.Table, error) {
	ret := _m.Called(id)

	var r0 tables.Table
	if rf, ok := ret.Get(0).(func(uint) tables.Table); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(tables.Table)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
