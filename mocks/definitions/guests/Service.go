// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	guests "github.com/getground/tech-tasks/backend/definitions/guests"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckIn provides a mock function with given fields: req
func (_m *Service) CheckIn(req guests.CheckInRequest) (guests.CheckInResponse, error) {
	ret := _m.Called(req)

	var r0 guests.CheckInResponse
	if rf, ok := ret.Get(0).(func(guests.CheckInRequest) guests.CheckInResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(guests.CheckInResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(guests.CheckInRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOut provides a mock function with given fields: name
func (_m *Service) CheckOut(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: request
func (_m *Service) Create(request guests.CreateRequest) (guests.CreateResponse, error) {
	ret := _m.Called(request)

	var r0 guests.CreateResponse
	if rf, ok := ret.Get(0).(func(guests.CreateRequest) guests.CreateResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(guests.CreateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(guests.CreateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuestList provides a mock function with given fields:
func (_m *Service) GetGuestList() (guests.ListDTO, error) {
	ret := _m.Called()

	var r0 guests.ListDTO
	if rf, ok := ret.Get(0).(func() guests.ListDTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(guests.ListDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuests provides a mock function with given fields:
func (_m *Service) GetGuests() (guests.DTO, error) {
	ret := _m.Called()

	var r0 guests.DTO
	if rf, ok := ret.Get(0).(func() guests.DTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(guests.DTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
